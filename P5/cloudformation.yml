AWSTemplateFormatVersion: "2010-09-09"
Description: "Desacoplamiento en tres microservicios con SQS y EC2"

Parameters:
  InstanceType:
    Type: String
    Default: t2.micro
    Description: Tipo de instancia EC2
    AllowedValues:
      - t2.micro
      - t2.small
      - t3.micro
      - t3.small

Resources:
  ##########################
  # 1. Colas SQS
  ##########################
  QueueAtoB:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "QueueAtoB"

  QueueBtoC:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "QueueBtoC"

  ##########################
  # 2. Rol IAM para EC2 con permisos SQS
  # Usaremos el rol por defecto "LabRole"
  ##########################

  ##########################
  # VPC y Recursos de Red
  ##########################

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable

  ##########################
  # 3. Security Group
  ##########################
  MicroservicesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Permite acceso HTTP a Flask"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5001
          ToPort: 5001
          CidrIp: 0.0.0.0/0 # fA
        - IpProtocol: tcp
          FromPort: 5002
          ToPort: 5002
          CidrIp: 0.0.0.0/0 # fB
        - IpProtocol: tcp
          FromPort: 5003
          ToPort: 5003
          CidrIp: 0.0.0.0/0 # fC

  ##########################
  # 4. Instancias EC2 (fA, fB, fC)
  ##########################
  EC2fA:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: vockey
      SubnetId: !Ref Subnet1
      # IamInstanceProfile: "LabRole"
      SecurityGroupIds:
        - !GetAtt MicroservicesSecurityGroup.GroupId
      ImageId: ami-06b21ccaeff8cd686
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update and install dependencies
          yum update -y
          yum install -y python3 git python3-pip
          pip3 install flask boto3

          # Export environment variables
          export QUEUE_A_TO_B_URL=${QueueAtoB}
          export AWS_REGION=us-east-1

          # Create the Python application
          cat << EOF > /home/ec2-user/fA.py
          import os
          import time
          import boto3
          from flask import Flask, request

          app = Flask(__name__)
          sqs_client = boto3.client('sqs', region_name=os.environ.get("AWS_REGION", "us-east-1"))

          QUEUE_A_TO_B_URL = os.environ.get("QUEUE_A_TO_B_URL")

          @app.route("/start", methods=["POST"])
          def start_flow():
              input_data = request.json.get("data", "Inicio:")
              print("[fA] Recibiendo:", input_data)
              time.sleep(5)
              output_data = input_data + "A"
              print("[fA] Enviando a SQS:", output_data)
              sqs_client.send_message(QueueUrl=QUEUE_A_TO_B_URL, MessageBody=output_data)
              return {"status": "ok", "fA_output": output_data}, 200

          if __name__ == "__main__":
              app.run(host="0.0.0.0", port=5001)
          EOF

          # Ensure log file location exists and set permissions
          sudo touch /var/log/fa_service.log
          sudo chmod 644 /var/log/fa_service.log

          # Start the Python application and log output
          sudo nohup python3 /home/ec2-user/fA.py > /var/log/fa_service.log 2>&1 &
    Metadata:
      Comment: "Instancia EC2 que ejecuta microservicio fA"

  EC2fB:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: vockey
      SubnetId: !Ref Subnet1
      # IamInstanceProfile: "LabRole"
      SecurityGroupIds:
        - !GetAtt MicroservicesSecurityGroup.GroupId
      ImageId: ami-06b21ccaeff8cd686
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update and install dependencies
          yum update -y
          yum install -y python3 git python3-pip
          pip3 install boto3

          # Export environment variables
          export QUEUE_A_TO_B_URL=${QueueAtoB}
          export QUEUE_B_TO_C_URL=${QueueBtoC}
          export AWS_REGION=us-east-1

          # Create the Python application
          cat << EOF > /home/ec2-user/fB.py
          import os
          import time
          import boto3

          sqs_client = boto3.client('sqs', region_name=os.environ.get("AWS_REGION", "us-east-1"))
          QUEUE_A_TO_B_URL = os.environ.get("QUEUE_A_TO_B_URL")
          QUEUE_B_TO_C_URL = os.environ.get("QUEUE_B_TO_C_URL")

          def process_message_b(dataB):
              print("[fB] Procesando:", dataB)
              time.sleep(3)
              return dataB + "B"

          def main_loop():
              while True:
                  messages = sqs_client.receive_message(
                      QueueUrl=QUEUE_A_TO_B_URL,
                      MaxNumberOfMessages=1,
                      WaitTimeSeconds=10
                  )
                  if "Messages" in messages:
                      for msg in messages["Messages"]:
                          body = msg["Body"]
                          output_data = process_message_b(body)
                          print("[fB] Enviando a SQS:", output_data)
                          sqs_client.send_message(
                              QueueUrl=QUEUE_B_TO_C_URL,
                              MessageBody=output_data
                          )
                          sqs_client.delete_message(
                              QueueUrl=QUEUE_A_TO_B_URL,
                              ReceiptHandle=msg["ReceiptHandle"]
                          )
                  time.sleep(2)

          if __name__ == "__main__":
              main_loop()
          EOF

          # Ensure log file location exists and set permissions
          sudo touch /var/log/fb_service.log
          sudo chmod 644 /var/log/fb_service

          # Start the Python application and log output
          sudo nohup python3 /home/ec2-user/fB.py > /var/log/fb_service.log 2>&1 &

    Metadata:
      Comment: "Instancia EC2 que ejecuta microservicio fB"

  EC2fC:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: vockey
      SubnetId: !Ref Subnet1
      # IamInstanceProfile: "LabRole"
      SecurityGroupIds:
        - !GetAtt MicroservicesSecurityGroup.GroupId
      ImageId: ami-06b21ccaeff8cd686
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update and install dependencies
          yum update -y
          yum install -y python3 git python3-pip
          pip3 install boto3

          # Export environment variables
          export QUEUE_B_TO_C_URL=${QueueBtoC}
          export AWS_REGION=us-east-1

          # Create the Python application
          cat << EOF > /home/ec2-user/fC.py
          import os
          import time
          import boto3

          sqs_client = boto3.client('sqs', region_name=os.environ.get("AWS_REGION", "us-east-1"))
          QUEUE_B_TO_C_URL = os.environ.get("QUEUE_B_TO_C_URL")

          def process_message_c(dataC):
              print("[fC] Procesando:", dataC)
              time.sleep(4)
              return dataC + "C"

          def main_loop():
              while True:
                  messages = sqs_client.receive_message(
                      QueueUrl=QUEUE_B_TO_C_URL,
                      MaxNumberOfMessages=1,
                      WaitTimeSeconds=10
                  )
                  if "Messages" in messages:
                      for msg in messages["Messages"]:
                          body = msg["Body"]
                          output_data = process_message_c(body)
                          print("[fC] Resultado final:", output_data)
                          sqs_client.delete_message(
                              QueueUrl=QUEUE_B_TO_C_URL,
                              ReceiptHandle=msg["ReceiptHandle"]
                          )
                  time.sleep(2)

          if __name__ == "__main__":
              main_loop()
          EOF

          # Ensure log file location exists and set permissions
          sudo touch /var/log/fc_service.log
          sudo chmod 644 /var/log/fc_service.log

          # Start the Python application and log output
          sudo nohup python3 /home/ec2-user/fC.py > /var/log/fc_service.log 2>&1 &

    Metadata:
      Comment: "Instancia EC2 que ejecuta microservicio fC"

Outputs:
  QueueAtoBUrl:
    Description: URL de la cola A->B
    Value: !Ref QueueAtoB

  QueueBtoCUrl:
    Description: URL de la cola B->C
    Value: !Ref QueueBtoC

  fAInstanceID:
    Description: Instancia que corre microservicio fA
    Value: !Ref EC2fA

  fBInstanceID:
    Description: Instancia que corre microservicio fB
    Value: !Ref EC2fB

  fCInstanceID:
    Description: Instancia que corre microservicio fC
    Value: !Ref EC2fC
